name: $(BuildId)

trigger:
  batch: false
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

pr:
  autoCancel: true
  branches:
    include:
    - '*'

stages:
  - stage: build
    jobs:
    - job: RunTests
      pool:
        vmImage: 'Ubuntu 16.04'
      steps:
        - bash: |
            if [ -f extensions.csproj ]
            then
                dotnet build extensions.csproj --output ./bin
            fi
          displayName: 'build function extensions'
        - script: npm install
          displayName: 'npm install'
        - script: npm run lint
          displayName: 'npm run lint'
        - script: npm run test-with-coverage
          displayName: 'npm run test-with-coverage'
        - script: npm prune --production
          displayName: 'npm prune --production'
        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
            reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testRunner: JUnit
            testResultsFiles: '$(System.DefaultWorkingDirectory)/test-results.xml'
        - task: ArchiveFiles@2
          displayName: 'Archive Function App'
          inputs:
            archiveFile: '$(System.DefaultWorkingDirectory)/$(Build.BuildId).zip'
            includeRootFolder: false
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifacts'
          inputs:
            artifactName: 'drop'
            pathtoPublish: '$(System.DefaultWorkingDirectory)/$(Build.BuildId).zip'

name: $(BuildId)

trigger:
  batch: false
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

pr:
  autoCancel: true
  branches:
    include:
    - '*'

variables:
  ARTIFACT_NAME: drop

stages:
- stage: build
  jobs:
  - job: RunTests
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
    - bash: |
        if [ -f extensions.csproj ]
        then
            dotnet build extensions.csproj --output ./bin
        fi
      displayName: 'build function extensions'
    - script: npm install
      displayName: 'npm install'
    - script: npm run lint
      displayName: 'npm run lint'
    - script: npm run test-with-coverage
      displayName: 'npm run test-with-coverage'
    - script: npm prune --production
      displayName: 'npm prune --production'
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: JUnit
        testResultsFiles: '$(System.DefaultWorkingDirectory)/test-results.xml'
    - task: ArchiveFiles@2
      displayName: 'Archive Function App'
      inputs:
        archiveFile: '$(System.DefaultWorkingDirectory)/$(Build.BuildId).zip'
        includeRootFolder: false
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        artifactName: $(ARTIFACT_NAME)
        pathtoPublish: '$(System.DefaultWorkingDirectory)/$(Build.BuildId).zip'

- stage: deployReviewEnvironment
  displayName: 'Deploy to Review Environment'
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
  dependsOn: build
  jobs:
  - job: DeployReviewEnvironment
    displayName: 'Deploy to Review Environment'
    pool:
      vmImage: 'Ubuntu 16.04'
    variables:
      APP_NAME: 'nhsuk-cache-flush-func-dev-uks-PR-$(system.pullRequest.pullRequestNumber)'
      RELEASE_ENVIRONMENTNAME: 'dev'
    steps:
    - bash: ./scripts/get-variables-from-vault.sh
      displayName: 'Get variables from Vault'
      env:
        VAULT_TOKEN: $(VAULT_TOKEN)
    - bash: |
        echo '*********************DEBUG OUPUT...'
        echo 'RESOURCE_GROUP: $(RESOURCE_GROUP)'
        echo 'APP_NAME: $(APP_NAME)'
        echo 'APP_PLAN: $(APP_PLAN)'
        echo 'LOCATION: $(LOCATION)'
        echo 'host: $(host)'
        echo '*********************DEBUG OUTPUT...DONE'
      displayName: 'some debug output'
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment: Create Or Update Resource Group ($(RESOURCE_GROUP))'
      inputs:
        azureSubscription: Development
        resourceGroupName: $(RESOURCE_GROUP)
        location: $(LOCATION)
        csmFile: $(System.DefaultWorkingDirectory)/AzureResourceGroup/AzureDeploy.json
        overrideParameters: '-appPlan "$(APP_PLAN)" -appName "$(APP_NAME)" -location "$(LOCATION)"'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Azure App Service Deploy: Review app'
      inputs:
        azureSubscription: Development
        appType: functionApp
        WebAppName: $(APP_NAME)
        AppSettings: '-access_token "$(access_token)" -client_secret "$(client_secret)" -client_token "$(client_token)" -host "$(host)" -WEBSITE_NODE_DEFAULT_VERSION $(WEBSITE_NODE_DEFAULT_VERSION)'
    - task: Bash@3
      displayName: 'Test app is running'
      inputs:
        targetType: filePath
        filePath: ./scripts/test-app-is-running.sh
